[2] JSON-RPC error handling

JSON-RPC respone error handling ==> raise some Exception

[14] State audit: YAML -- active state -- OVSDB consistency

[15] NLAN Agent on Windows, without OVSDB or with SQLITE as a local DB.

[16] Run nlan_agent.py within a linux container (by using lxc-execute/lxc-init).

I have already built lxc-capable linux kernel for OpenWrt and Raspbian. For the simulation environment, I need to re-build lxc-capable OpenWrt image for x86 w/ lxc support.

[21] Working with iptables

[22] State rollback under failure

[23] GET operation can not get multiple states of modules at a time

Improve nlan_agent.py's _route function.

[24] System-wide lock for CRUD add/update/delete operations. 

[25] Test scenario "subnets.yaml" does not run properly at the steps with default gw configuration, because the ip address has never been set and thus unreachable.

-----

[1] OVSDB schema analyzer script -- DONE!

Why does OVSDB return a string instead of a list, even if it can be seen as a list in the output of ovsdb-client dump?
Maybe the program needs to refer to the OVSDB schema when converting JSON-RPC output to Python dict.

[3] CRUD -- DONE!
Use crud instead of setrow in bridges, vxlan and gateway.

[4] option -- DONE!

$ python nlan_master.py -t openwrt1 --raw 'ip netns exec ns1 ping -c 2 10.0.1.102'
$ ./nlan --raw ' ... -c ...' fails, since it inculdes '-c' option.

[5] ovsdb.py get_current_state -- DONE!

Use OrderedDict instead of normal dict

[6] nlan.py system.rc enable -- DONE! Made a workaround.

OpenWrt's rc.common return exit code 1, even if it is successful:
Command '['/etc/init.d/nlan', 'enable']' returned non-zero exit status 1

[7] nlan_agent.py --init start does not work. -- DONE! Bug fixed.

[8] nlan.py and yamldiff.py dose not handle -G option. -- DONE! Also added -R option.

[9] vid modification in dvsdvr.yaml results in an add operation, not an update operation. -- DONE! Decided to prohibit vid modification.

[10] yamldiff.py cannot generate diff for list. -- DONE! update transalates into delete/add peers in subnets.py.

peers:
  - 192.168.1.101
  - 192.168.1.102

peers:
  - 192.168.1.101
  - 192.168.1.103
  - 192.168.1.102

In this case, yamldiff should generate add peers 192.168.1.103, not update peers with all the addresses.

[11] A pair of ip_dvr and mode should be expressed as a 'map' data on OVSDB. -- DONE!

[12] sit_debug stalls somehow. -- DONE! This problem seems to be a Python's bug:

queue.put({<key>:<very large object>})
l = queue.get() # still copyting the object to the parent process

Reference: http://bryceboe.com/2011/01/28/the-python-multiprocessing-queue-and-large-objects/

So I added an parameter output_stdout to the "main" function in nlan.py:
if False, stdout is not put in the queue.

[13] nlan_agent.py local mode: state deployment w/o using nlan.py. -- DONE!

[17] State params for delete operations -- DONE!

Allow them to have None value.

[18] argsmodel.py  schema_help output, working with enum -- DONE!

[19] Parameter cheking by referring to the schema -- DONE!

[20] Working with dnsmasq -- DONE!

But it is limited to OpenWrt only.
